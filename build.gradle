plugins {
    id 'java'
    id 'io.qameta.allure' version '2.9.6'
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(16))
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    seleniumVersion = '4.1.4'
    webDrviverVersion = '5.2.1'
    junitVersion = '5.8.2'
    junitPlatformVersion = '1.8.2'
    ownerVersion = '1.0.12'
    jacksonVersion = '2.13.2'
    lombokVersion = '1.18.24'
    slf4jVersion = '1.7.36'
    assertjVersion = '3.22.0'
    aspectjweaver = '1.9.5'
    allurejunit5Version = '2.12.1'
    restAssuredVersion = '5.0.0'
}

dependencies {
    testImplementation("org.seleniumhq.selenium:selenium-java:$seleniumVersion")

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    testImplementation "org.junit.platform:junit-platform-runner:$junitPlatformVersion"
    testImplementation "org.junit.platform:junit-platform-suite-api:$junitPlatformVersion"

    // https://mvnrepository.com/artifact/org.aeonbits.owner/owner
    testImplementation("org.aeonbits.owner:owner:$ownerVersion") {
        because("we want a reduction in boilerplate code related to reading/using values from .properties files in Java")
    }

    testImplementation("io.github.bonigarcia:webdrivermanager:$webDrviverVersion")

    // logging facade
    // https://mvnrepository.com/artifact/org.slf4j
    testImplementation "org.slf4j:slf4j-api:$slf4jVersion"
    testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"

    // lombok - boilerplate-reducing annotations
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    testImplementation "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation("org.assertj:assertj-core:$assertjVersion") {
        because("we want to be able to write custom assertions")
    }

    // https://mvnrepository.com/artifact/io.rest-assured/rest-assured
    testImplementation "io.rest-assured:rest-assured:$restAssuredVersion"

    testImplementation "org.aspectj:aspectjweaver:$aspectjweaver"
    testImplementation "io.qameta.allure:allure-junit5:$allurejunit5Version"
    testImplementation "io.qameta.allure:allure-commandline:$allurejunit5Version"
    testImplementation "io.qameta.allure:allure-assertj:$allurejunit5Version"
    testImplementation "io.qameta.allure:allure-rest-assured:$allurejunit5Version"
    testImplementation "io.qameta.allure:allure-java-commons:$allurejunit5Version"
}

test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    useJUnitPlatform() {
        includeTags(project.hasProperty('tags') ? project.getProperty('tags') : "none() | any()")
    }
    testLogging {
        events("passed", "skipped", "failed")
    }
    testLogging.showStandardStreams = true
    group = "verification"
    systemProperties = [
            "target_env"                              : project.hasProperty('target_env') ? project.getProperty('target_env') : 'qa',

            // override property value defined in junit-platform.properties if provided via cmd
            'junit.jupiter.execution.parallel.enabled': project.hasProperty('parallel') ? project.getProperty('parallel') : false
    ]
}

task wip(type: Test) {
    useJUnitPlatform() {
        includeTags "wip"
    }
}